// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

//                              A               D               M
// destination bits - ddd - instruction[5] instruction[4] instruction[3]


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // control between the input instruction and ALU output (set control bit to instruction[15])
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=inA);

    // if (the input instruction is C instruction) → loadA to 3rd bit of ddd (destination to A) ; instruction[5]
    // else set loadA to true (because the input instruction is A instruction)
    And(a=instruction[15], b=instruction[5], out=insC);
    Mux(a=true, b=insC, sel=instruction[15], out=loadA);
    ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
    
    // if (the input instruction is C instruction) → loadA to 2nd bit of ddd (destination to D) ; instruction[4]
    And(a=instruction[15], b=instruction[4], out=loadC); 
    DRegister(in=aluOut, load=loadC, out=aluInX);

    // control between the value from ARegister and the input value from Memory
    // set control bit to 'a' bit from the input instruction (111accccccdddjjj) ; instruction[12]
    Mux16(a=outA, b=inM, sel=instruction[12], out=aluInY);

    ALU(x=aluInX, y=aluInY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);
 
    // if (the input instruction is C instruction) and (1st bit of jjj is 1) → output writeM to true
    And(a=instruction[15], b=instruction[3], out=writeM);

    // jjj = instruction[2] instruction[1] instruction[0]
    DMux8Way(in=true, sel=instruction[0..2], a=null, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    
    // outM is zero
    And(a=jeq, b=zr, out=JEQ);
    
    // outM is not zero
    Not(in=zr, out=nzr);
    And(a=jne, b=nzr, out=JNE);

    // outM is negative
    And(a=jlt, b=ng, out=JLT);
    
    // outM is negative or zero
    Or(a=ng, b=zr, out=ngzr);
    And(a=jle, b=ngzr, out=JLE);

    // outM is positive
    Not(in=ngzr, out=pt);
    And(a=jgt, b=pt, out=JGT);

    // outM is positive or zero
    Or(a=pt, b=zr, out=ptzr);
    And(a=jge, b=ptzr, out=JGE);  
    
    Or8Way(in[0]=JEQ, in[1]=JLT, in[2]=JNE, in[3]=JLE, in[4]=JGT, in[5]=JGE, in[6]=jmp, in[7]=false, out=cond);
    
    // control jump if it is C instruction
    And(a=instruction[15], b=cond, out=loadJump);

    PC(in=outA, load=loadJump, inc=true, reset=reset, out[0..14]=pc);
}